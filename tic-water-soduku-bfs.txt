import java.util.Scanner;
import java.util.Random;

public class TicTacToe {
    private static final char EMPTY = ' ';
    private static final char USER_SYMBOL = 'X';
    private static final char COMPUTER_SYMBOL = 'O';

    private static char[][] board = {
            {EMPTY, EMPTY, EMPTY},
            {EMPTY, EMPTY, EMPTY},
            {EMPTY, EMPTY, EMPTY}
    };

    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        printBoard();
        while (true) {
            userMove();
            printBoard();
            if (checkWin(USER_SYMBOL)) {
                System.out.println("Congratulations! You win!");
                break;
            }
            if (isBoardFull()) {
                System.out.println("It's a draw!");
                break;
            }

            computerMove();
            printBoard();
            if (checkWin(COMPUTER_SYMBOL)) {
                System.out.println("Computer wins! Better luck next time.");
                break;
            }
            if (isBoardFull()) {
                System.out.println("It's a draw!");
                break;
            }
        }
    }

    private static void printBoard() {
        System.out.println("-------------");
        for (int i = 0; i < 3; i++) {
            System.out.print("| ");
            for (int j = 0; j < 3; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }

    private static void userMove() {
        int row, col;
        do {
            System.out.print("Enter your move (row[1-3] and column[1-3] separated by space): ");
            row = scanner.nextInt() - 1;
            col = scanner.nextInt() - 1;
        } while (!isValidMove(row, col));

        board[row][col] = USER_SYMBOL;
    }

    private static boolean isValidMove(int row, int col) {
        if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != EMPTY) {
            System.out.println("Invalid move. Try again.");
            return false;
        }
        return true;
    }

    private static void computerMove() {
        System.out.println("Computer's move:");
        int[] move = findBestMove();
        board[move[0]][move[1]] = COMPUTER_SYMBOL;
    }

    private static int[] findBestMove() {
        // A simple AI strategy: Randomly choose an available empty spot
        Random random = new Random();
        int row, col;
        do {
            row = random.nextInt(3);
            col = random.nextInt(3);
        } while (board[row][col] != EMPTY);
        return new int[]{row, col};
    }

    private static boolean checkWin(char symbol) {
        // Check rows, columns, and diagonals for a win
        for (int i = 0; i < 3; i++) {
            if ((board[i][0] == symbol && board[i][1] == symbol && board[i][2] == symbol) ||
                    (board[0][i] == symbol && board[1][i] == symbol && board[2][i] == symbol)) {
                return true;
            }
        }
        return (board[0][0] == symbol && board[1][1] == symbol && board[2][2] == symbol) ||
                (board[0][2] == symbol && board[1][1] == symbol && board[2][0] == symbol);
    }

    private static boolean isBoardFull() {
        // Check if the board is full (a draw)
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == EMPTY) {
                    return false;
                }
            }
        }
        return true;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.*;

class WaterJugProblem {

    static class State {
        int jug1, jug2;
        List<State> path;

        State(int jug1, int jug2) {
            this.jug1 = jug1;
            this.jug2 = jug2;
            this.path = new ArrayList<>();
        }

        State(int jug1, int jug2, List<State> path) {
            this.jug1 = jug1;
            this.jug2 = jug2;
            this.path = new ArrayList<>(path);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter capacity of Jug 1: ");
        int jug1Capacity = scanner.nextInt();
        System.out.print("Enter capacity of Jug 2: ");
        int jug2Capacity = scanner.nextInt();
        System.out.print("Enter target volume: ");
        int targetVolume = scanner.nextInt();

        if (targetVolume > jug1Capacity + jug2Capacity) {
            System.out.println("Warning: Target volume exceeds the sum of jug capacities. Not possible to obtain target volume.");
        } else if (!isReachable(jug1Capacity, jug2Capacity, targetVolume)) {
            System.out.println("Warning: Target volume is not reachable from the initial state. Not possible to obtain target volume.");
        } else {
            getPathIfPossible(jug1Capacity, jug2Capacity, targetVolume);
        }

        scanner.close();
    }

    private static boolean isReachable(int jug1Capacity, int jug2Capacity, int targetVolume) {
        boolean[][] visited = new boolean[jug1Capacity + 1][jug2Capacity + 1];
        Queue<State> queue = new LinkedList<>();

        State initialState = new State(0, 0);
        queue.offer(initialState);

        while (!queue.isEmpty()) {
            State curr = queue.poll();

            if (curr.jug1 == targetVolume || curr.jug2 == targetVolume) {
                return true;
            }

            visited[curr.jug1][curr.jug2] = true;

            if (curr.jug1 < jug1Capacity && !visited[jug1Capacity][curr.jug2]) {
                State nextState = new State(jug1Capacity, curr.jug2, curr.path);
                nextState.path.add(curr);
                queue.offer(nextState); // Fill jug1
            }
            if (curr.jug2 < jug2Capacity && !visited[curr.jug1][jug2Capacity]) {
                State nextState = new State(curr.jug1, jug2Capacity, curr.path);
                nextState.path.add(curr);
                queue.offer(nextState); // Fill jug2
            }
            if (curr.jug1 > 0 && !visited[0][curr.jug2]) {
                State nextState = new State(0, curr.jug2, curr.path);
                nextState.path.add(curr);
                queue.offer(nextState); // Empty jug1
            }
            if (curr.jug2 > 0 && !visited[curr.jug1][0]) {
                State nextState = new State(curr.jug1, 0, curr.path);
                nextState.path.add(curr);
                queue.offer(nextState); // Empty jug2
            }

            int pour = Math.min(curr.jug1, jug2Capacity - curr.jug2);
            if (pour > 0 && !visited[curr.jug1 - pour][curr.jug2 + pour]) {
                State nextState = new State(curr.jug1 - pour, curr.jug2 + pour, curr.path);
                nextState.path.add(curr);
                queue.offer(nextState); // Pour from jug1 to jug2
            }

            pour = Math.min(curr.jug2, jug1Capacity - curr.jug1);
            if (pour > 0 && !visited[curr.jug1 + pour][curr.jug2 - pour]) {
                State nextState = new State(curr.jug1 + pour, curr.jug2 - pour, curr.path);
                nextState.path.add(curr);
                queue.offer(nextState); // Pour from jug2 to jug1
            }
        }

        return false;
    }

    private static void getPathIfPossible(int jug1Capacity, int jug2Capacity, int targetVolume) {
        boolean[][] visited = new boolean[jug1Capacity + 1][jug2Capacity + 1];
        Queue<State> queue = new LinkedList<>();

        State initialState = new State(0, 0);
        initialState.path.add(initialState);
        queue.offer(initialState);

        while (!queue.isEmpty()) {
            State curr = queue.poll();

            if (curr.jug1 == targetVolume || curr.jug2 == targetVolume) {
                displayPath(curr);
                return;
            }

            visited[curr.jug1][curr.jug2] = true;

            queue.offer(new State(jug1Capacity, curr.jug2, curr.path)); // Fill jug1
            queue.offer(new State(curr.jug1, jug2Capacity, curr.path)); // Fill jug2
            queue.offer(new State(0, curr.jug2, curr.path)); // Empty jug1
            queue.offer(new State(curr.jug1, 0, curr.path)); // Empty jug2

            int pour = Math.min(curr.jug1, jug2Capacity - curr.jug2);
            queue.offer(new State(curr.jug1 - pour, curr.jug2 + pour, curr.path)); // Pour from jug1 to jug2

            pour = Math.min(curr.jug2, jug1Capacity - curr.jug1);
            queue.offer(new State(curr.jug1 + pour, curr.jug2 - pour, curr.path)); // Pour from jug2 to jug1
        }

        System.out.println("Warning: Not possible to obtain target volume.");
    }

    private static void displayPath(State state) {
        System.out.println("Steps to reach target volume:");

        List<State> path = state.path;
        for (int i = 0; i < path.size(); i++) {
            State s = path.get(i);
            System.out.println("Step " + (i + 1) + ": Jug 1: " + s.jug1 + ", Jug 2: " + s.jug2);
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class SudokuPuzzle
{
    public boolean isSafe(int[][] b, int r, int c, int n)
    {
// the loop takes care of the clash in the row of the grid
        for (int d = 0; d < b.length; d++)
        {

// if the number that we have inserted is already
// present in that row then return false
            if (b[r][d] == n)
            {
                return false;
            }
        }

// the loop takes care of the clash in the column of the grid
        for (int r1 = 0; r1 < b.length; r1++)
        {

// if the number that we have inserted is already
// present in that column then return false
            if (b[r1][c] == n)
            {
                return false;
            }
        }

// the loop takes care of the clash in the sub-grid that is present in the grid
        int sqt = (int)Math.sqrt(b.length);
        int boxRowSt = r - r % sqt;
        int boxColSt = c - c % sqt;

        for (int r1 = boxRowSt; r1 < boxRowSt + sqt; r1++)
        {
            for (int d = boxColSt; d < boxColSt + sqt; d++)
            {
// if the number that we have inserted is already
// present in that sub-grid then return false
                if (b[r1][d] == n)
                {
                    return false;
                }
            }
        }

// if there is no clash in the grid, then it is safe and
// true is returned
        return true;
    }

    public boolean solveSudoku(int[][] b, int num)
    {
        int r = -1;
        int c = -1;
        boolean isVacant = true;
        for (int i = 0; i < num; i++)
        {
            for (int j = 0; j < num; j++)
            {
                if (b[i][j] == 0)
                {
                    r = i;
                    c = j;

// false value means
// there is still some
// vacant cells in the grid
                    isVacant = false;
                    break;
                }
            }

            if (!isVacant)
            {
                break;
            }
        }

// there is no empty space left
// in the grid
        if (isVacant)
        {
            return true;
        }

// otherwise for each row do the backtracking
        for (int no = 1; no <= num; no++)
        {
            if (isSafe(b, r, c, no))
            {
                b[r][c] = no;
                if (solveSudoku(b, num))
                {
// display(board, num);
                    return true;
                }
                else
                {

                    b[r][c] = 0;
                }
            }
        }
        return false;
    }

    public void display(int[][] b, int n)
    {

// We have got the solution, just display it
        for (int i = 0; i < n; i++)
        {
            for (int d = 0; d < n; d++)
            {
                System.out.print(b[i][d]);
                System.out.print(" ");
            }

            System.out.print("\n");

            if ((i + 1) % (int)Math.sqrt(n) == 0)
            {
                System.out.print("");
            }
        }
    }

    // main method
    public static void main(String argvs[])
    {

// the 9 x 9  grid
        int[][] b = new int[][] { { 7, 0, 0, 0, 0, 0, 2, 0, 0 },
                { 4, 0, 2, 0, 0, 0, 0, 0, 3 },
                { 0, 0, 0, 2, 0, 1, 0, 0, 0 },
                { 3, 0, 0, 1, 8, 0, 0, 9, 7 },
                { 0, 0, 9, 0, 7, 0, 6, 0, 0 },
                { 6, 5, 0, 0, 3, 2, 0, 0, 1 },
                { 0, 0, 0, 4, 0, 9, 0, 0, 0 },
                { 5, 0, 0, 0, 0, 0, 1, 0, 6 },
                { 0, 0, 6, 0, 0, 0, 0, 0, 8 }
        } ;

// creating an object of the class SudokuPuzzle
        SudokuPuzzle obj = new SudokuPuzzle();

// computing the size of the grid
        int size = b.length;

        System.out.println("The grid is: ");
        for(int i = 0; i < size; i++)
        {
            for(int j = 0; j < size; j++)
            {
                System.out.print(b[i][j] + " ");
            }

            System.out.println();
        }
        System.out.println();
        if (obj.solveSudoku(b, size))
        {
// display solution

            System.out.println("The solution of the grid is: ");
            obj.display(b, size);
        }
        else
        {
            System.out.println("There is no solution available.");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.*;

public class BFSvsDFS {

    public static void main(String[] args) {
        // Create a graph
        Graph graph = new Graph();

        // Add nodes to the graph
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        graph.addNode("E");

        // Add edges to the graph
        graph.addEdge("A", "B");
        graph.addEdge("A", "C");
        graph.addEdge("B", "D");
        graph.addEdge("C", "E");

        // Measure time for BFS
        System.out.println("BFS:");
        long startTimeBFS = System.nanoTime();
        bfs(graph);
        long endTimeBFS = System.nanoTime();
        long elapsedTimeBFS = endTimeBFS - startTimeBFS;
        System.out.println("Time taken for BFS: " + elapsedTimeBFS + " nanoseconds");

        // Measure time for DFS
        System.out.println("DFS:");
        long startTimeDFS = System.nanoTime();
        dfs(graph);
        long endTimeDFS = System.nanoTime();
        long elapsedTimeDFS = endTimeDFS - startTimeDFS;
        System.out.println("Time taken for DFS: " + elapsedTimeDFS + " nanoseconds");
    }

    public static void bfs(Graph graph) {
        // Create a queue to store the nodes to be visited
        Queue<Node> queue = new LinkedList<>();

        // Add the root node to the queue
        queue.add(graph.getRootNode());

        // While the queue is not empty
        while (!queue.isEmpty()) {
            // Get the next node from the queue
            Node node = queue.remove();

            // Visit the node
            System.out.println(node.getName());

            // Add the node's children to the queue
            for (Node child : node.getChildren()) {
                queue.add(child);
            }
        }
    }

    public static void dfs(Graph graph) {
        // Create a stack to store the nodes to be visited
        Stack<Node> stack = new Stack<>();

        // Add the root node to the stack
        stack.push(graph.getRootNode());

        // While the stack is not empty
        while (!stack.isEmpty()) {
            // Get the next node from the stack
            Node node = stack.pop();

            // Visit the node
            System.out.println(node.getName());

            // Add the node's children to the stack
            for (Node child : node.getChildren()) {
                stack.push(child);
            }
        }
    }
}

class Graph {

    private Node rootNode;

    public Graph() {
        this.rootNode = null;
    }

    public void addNode(String name) {
        Node node = new Node(name);

        if (this.rootNode == null) {
            this.rootNode = node;
        } else {
            this.rootNode.addChild(node);
        }
    }

    public void addEdge(String sourceName, String destinationName) {
        Node sourceNode = this.findNode(sourceName);
        Node destinationNode = this.findNode(destinationName);

        if (sourceNode != null && destinationNode != null) {
            sourceNode.addChild(destinationNode);
        }
    }

    public Node getRootNode() {
        return this.rootNode;
    }

    private Node findNode(String name) {
        Queue<Node> queue = new LinkedList<>();

        queue.add(this.rootNode);

        while (!queue.isEmpty()) {
            Node node = queue.remove();

            if (node.getName().equals(name)) {
                return node;
            }

            for (Node child : node.getChildren()) {
                queue.add(child);
            }
        }

        return null;
    }
}

class Node {

    private String name;
    private List<Node> children;

    public Node(String name) {
        this.name = name;
        this.children = new ArrayList<>();
    }

    public String getName() {
        return this.name;
    }

    public List<Node> getChildren() {
        return this.children;
    }

    public void addChild(Node child) {
        this.children.add(child);
    }
}
